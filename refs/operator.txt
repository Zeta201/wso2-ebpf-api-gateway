package main

import (
	"context"
	"fmt"
	"os"
	"time"

	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logger "sigs.k8s.io/controller-runtime/pkg/log"
)

var log = ctrl.Log.WithName("builder-examples")
var podCount int32 = 1

func main() {

	logger.SetLogger(log)
	manager, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{})
	if err != nil {
		log.Error(err, "could not create manager")
		os.Exit(1)
	}

	err = ctrl.NewControllerManagedBy(manager).
		For(&appsv1.ReplicaSet{}).
		Owns(&corev1.Pod{}).
		Complete(&ReplicaSetReconciler{Client: manager.GetClient()})
	if err != nil {
		log.Error(err, "could not create controller")
	}

	if err := manager.Start(ctrl.SetupSignalHandler()); err != nil {
		log.Error(err, "could not start manager")
		os.Exit(1)
	}
}

type ReplicaSetReconciler struct {
	client.Client
}

func (a *ReplicaSetReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {

	log.Info("Reconciling replica set")
	rs := &appsv1.ReplicaSet{}
	err := a.Get(ctx, req.NamespacedName, rs)

	if err != nil {
		return ctrl.Result{}, err
	}

	pods := &corev1.PodList{}

	err = a.List(ctx, pods, client.InNamespace(req.Namespace), client.MatchingLabels(rs.Spec.Template.Labels))
	if err != nil {
		return ctrl.Result{}, err
	}

	rs.Labels["pod-count"] = fmt.Sprintf("%v", len(pods.Items))
	rs.Spec.Replicas = &podCount
	condition := appsv1.ReplicaSetCondition{
		Type:               "Failed",
		Status:             corev1.ConditionTrue,
		Reason:             "Resource Exhausted",
		Message:            "Waiting for resource to be released",
		LastTransitionTime: metav1.Time{Time: time.Now()},
	}
	rs.Status.Conditions = append(rs.Status.Conditions, condition)
	err = a.Update(context.TODO(), rs)
	if err != nil {
		return ctrl.Result{}, err
	}
	return ctrl.Result{}, nil
}